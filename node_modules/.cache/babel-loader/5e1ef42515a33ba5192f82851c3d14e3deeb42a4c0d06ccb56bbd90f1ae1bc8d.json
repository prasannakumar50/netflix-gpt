{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\GitHub\\\\netflix-gpt\\\\src\\\\components\\\\VideoBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { API_OPTIONS } from '../constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTrailerVideo } from \"../utils/moviesSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoBackground = ({\n  movieId\n}) => {\n  _s();\n  const trailerVideo = useSelector(store => {\n    var _store$movies;\n    return (_store$movies = store.movies) === null || _store$movies === void 0 ? void 0 : _store$movies.trailerVideo;\n  });\n  const dispatch = useDispatch();\n\n  //fetching the trailer video and updating the store with trailer video\n  const getMovieVideos = async () => {\n    const data = await fetch('https://api.themoviedb.org/3/movie/823464/videos?language=en-US', API_OPTIONS);\n    const json = await data.json();\n    const filterData = json.results.filter(video => video.type === \"Trailer\");\n    const trailer = filterData.length ? filterData[0] : json.results[0];\n    dispatch(addTrailerVideo(trailer));\n  };\n  useEffect(() => {\n    getMovieVideos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/\" + (trailerVideo === null || trailerVideo === void 0 ? void 0 : trailerVideo.key),\n      title: \"YouTube video player\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoBackground, \"SL0ME/v5YoVIodnUm5orAlohk5A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = VideoBackground;\nexport default VideoBackground;\nvar _c;\n$RefreshReg$(_c, \"VideoBackground\");","map":{"version":3,"names":["React","useEffect","API_OPTIONS","useDispatch","useSelector","addTrailerVideo","jsxDEV","_jsxDEV","VideoBackground","movieId","_s","trailerVideo","store","_store$movies","movies","dispatch","getMovieVideos","data","fetch","json","filterData","results","filter","video","type","trailer","length","children","width","height","src","key","title","allow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/GitHub/netflix-gpt/src/components/VideoBackground.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { API_OPTIONS } from '../constants';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addTrailerVideo } from \"../utils/moviesSlice\";\r\n\r\nconst VideoBackground = ({ movieId }) => {\r\n  const trailerVideo = useSelector(store => store.movies?.trailerVideo);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n //fetching the trailer video and updating the store with trailer video\r\n  const getMovieVideos = async () => {\r\n    const data = await fetch('https://api.themoviedb.org/3/movie/823464/videos?language=en-US', API_OPTIONS);\r\n    const json = await data.json();\r\n    const filterData = json.results.filter(video => video.type === \"Trailer\");\r\n    const trailer = filterData.length ? filterData[0] : json.results[0];\r\n    dispatch(addTrailerVideo(trailer));\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMovieVideos();\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <iframe\r\n        width=\"560\"\r\n        height=\"315\"\r\n        src={\"https://www.youtube.com/embed/\" + trailerVideo?.key}\r\n        title=\"YouTube video player\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoBackground;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,eAAe,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAMC,YAAY,GAAGP,WAAW,CAACQ,KAAK;IAAA,IAAAC,aAAA;IAAA,QAAAA,aAAA,GAAID,KAAK,CAACE,MAAM,cAAAD,aAAA,uBAAZA,aAAA,CAAcF,YAAY;EAAA,EAAC;EACrE,MAAMI,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAG/B;EACC,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,iEAAiE,EAAEhB,WAAW,CAAC;IACxG,MAAMiB,IAAI,GAAG,MAAMF,IAAI,CAACE,IAAI,CAAC,CAAC;IAC9B,MAAMC,UAAU,GAAGD,IAAI,CAACE,OAAO,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,CAAC;IACzE,MAAMC,OAAO,GAAGL,UAAU,CAACM,MAAM,GAAGN,UAAU,CAAC,CAAC,CAAC,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;IACnEN,QAAQ,CAACV,eAAe,CAACoB,OAAO,CAAC,CAAC;EACpC,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACde,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAIN,oBACET,OAAA;IAAAoB,QAAA,eACEpB,OAAA;MACEqB,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAE,gCAAgC,IAAGnB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEoB,GAAG,CAAC;MAC1DC,KAAK,EAAC,sBAAsB;MAC5BC,KAAK,EAAC;IAAqG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAA3B,EAAA,CA/BKF,eAAe;EAAA,QACEJ,WAAW,EACfD,WAAW;AAAA;AAAAmC,EAAA,GAFxB9B,eAAe;AAiCrB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}