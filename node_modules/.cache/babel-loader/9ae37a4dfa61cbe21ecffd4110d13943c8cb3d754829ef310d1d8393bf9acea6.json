{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\GitHub\\\\netflix-gpt\\\\src\\\\components\\\\Body.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Login from './Login';\nimport Browse from './Browse';\nimport { createBrowserRouter } from 'react-router-dom';\nimport { RouterProvider } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from '../utils/firebase';\nimport { useDispatch } from 'react-redux';\nimport { addUser, removeUser } from \"../utils/userSlice\";\nimport appStore from '../utils/appStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Body = () => {\n  _s();\n  const dispatch = useDispatch();\n  const appRouter = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/browse\",\n    element: /*#__PURE__*/_jsxDEV(Browse, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 18\n    }, this)\n  }]);\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        const {\n          uid,\n          email,\n          displayName\n        } = user;\n        dispatch(addUser({\n          uid: uid,\n          email: email,\n          displayName: displayName\n        }));\n      } else {\n        dispatch(removeUser());\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: appRouter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Body, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["React","Login","Browse","createBrowserRouter","RouterProvider","useEffect","getAuth","onAuthStateChanged","auth","useDispatch","addUser","removeUser","appStore","jsxDEV","_jsxDEV","Body","_s","dispatch","appRouter","path","element","fileName","_jsxFileName","lineNumber","columnNumber","user","uid","email","displayName","children","router","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/GitHub/netflix-gpt/src/components/Body.js"],"sourcesContent":["import React from 'react'\r\nimport Login from './Login'\r\nimport Browse from './Browse'\r\nimport { createBrowserRouter} from 'react-router-dom'\r\nimport { RouterProvider } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { auth } from '../utils/firebase';\r\nimport { useDispatch } from 'react-redux';\r\nimport {addUser, removeUser} from \"../utils/userSlice\"\r\nimport appStore from '../utils/appStore';\r\n\r\nconst Body = () => {\r\n  const dispatch =useDispatch();\r\n \r\n\r\n const appRouter = createBrowserRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <Login/>\r\n    },\r\n    {\r\n        path: \"/browse\",\r\n        element: <Browse/>\r\n    }\r\n ])\r\n\r\n useEffect(()=>{\r\n  onAuthStateChanged(auth, (user) => {\r\n    if (user) {\r\n     \r\n      const {uid,email,displayName} = user;\r\n      dispatch(addUser({uid:uid, email:email,displayName:displayName}));\r\n     \r\n\r\n    } else {\r\n      \r\n      dispatch(removeUser());\r\n\r\n    }\r\n  });\r\n  \r\n },[])\r\n\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <RouterProvider router={appRouter} />\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Body\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,mBAAmB,QAAO,kBAAkB;AACrD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAC3D,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAAQC,OAAO,EAAEC,UAAU,QAAO,oBAAoB;AACtD,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAER,WAAW,CAAC,CAAC;EAG9B,MAAMS,SAAS,GAAGf,mBAAmB,CAAC,CACnC;IACIgB,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEN,OAAA,CAACb,KAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EACpB,CAAC,EACD;IACIL,IAAI,EAAE,SAAS;IACfC,OAAO,eAAEN,OAAA,CAACZ,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EACrB,CAAC,CACH,CAAC;EAEFnB,SAAS,CAAC,MAAI;IACbE,kBAAkB,CAACC,IAAI,EAAGiB,IAAI,IAAK;MACjC,IAAIA,IAAI,EAAE;QAER,MAAM;UAACC,GAAG;UAACC,KAAK;UAACC;QAAW,CAAC,GAAGH,IAAI;QACpCR,QAAQ,CAACP,OAAO,CAAC;UAACgB,GAAG,EAACA,GAAG;UAAEC,KAAK,EAACA,KAAK;UAACC,WAAW,EAACA;QAAW,CAAC,CAAC,CAAC;MAGnE,CAAC,MAAM;QAELX,QAAQ,CAACN,UAAU,CAAC,CAAC,CAAC;MAExB;IACF,CAAC,CAAC;EAEH,CAAC,EAAC,EAAE,CAAC;EAGJ,oBACEG,OAAA;IAAAe,QAAA,eAEEf,OAAA,CAACV,cAAc;MAAC0B,MAAM,EAAEZ;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAElC,CAAC;AAEV,CAAC;AAAAR,EAAA,CAxCKD,IAAI;EAAA,QACQN,WAAW;AAAA;AAAAsB,EAAA,GADvBhB,IAAI;AA0CV,eAAeA,IAAI;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}